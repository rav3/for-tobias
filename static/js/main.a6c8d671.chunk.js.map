{"version":3,"sources":["component/calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","handleChange","event","setState","value","target","checkValid","classNames","randomise","one1","Math","floor","random","one2","state","score","parseInt","bind","handleSubmit","this","preventDefault","className","name","type","onChange","onClick","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSA0FeA,E,YArFX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAcVC,aAAe,SAACC,GAEZ,EAAKC,SAAS,CACVC,MAAOF,EAAMG,OAAOD,MACpBE,WAAaC,IAAW,aAAa,eAAgB,CAAE,cAAc,OAnB3D,EAuBlBC,UAAY,WACR,EAAKL,SAAS,CACVM,KAAOC,KAAKC,MAAM,GAAAD,KAAKE,UAAwB,GAC/CC,KAAOH,KAAKC,MAAM,GAAAD,KAAKE,UAAwB,GAC/CR,MAAO,MAzBX,EAAKU,MAAQ,CACTL,KAAOC,KAAKC,MAAM,GAAAD,KAAKE,UAAwB,GAC/CC,KAAOH,KAAKC,MAAM,GAAAD,KAAKE,UAAwB,GAC/CG,MAAQC,SAAS,GACjBZ,MAAQ,GACRE,WAAaC,IAAW,aAAa,eAAgB,CAAC,cAAc,KAGxE,EAAKN,aAAe,EAAKA,aAAagB,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXN,E,0EA+BLf,GAELc,SAASG,KAAKL,MAAMV,SAAWY,SAASG,KAAKL,MAAML,KAAOU,KAAKL,MAAMD,OAErEM,KAAKhB,SAAS,CACVY,MAAOI,KAAKL,MAAMC,MAAQ,EAC1BT,WAAaC,IAAW,aAAa,eAAgB,CAAE,cAAc,MAEzEY,KAAKX,aAKLW,KAAKhB,SAAS,CACVG,WAAaC,IAAW,aAAa,eAAgB,CAAC,cAAc,MAM5EL,EAAMkB,mB,+BAMN,OAAID,KAAKL,MAAMC,MAAQ,EAEf,wBAAIM,UAAU,eAAd,OAKA,6BACI,yBAAKA,UAAU,uBACX,uBAAGA,UAAU,eAAb,SACA,wBAAIA,UAAU,eAAeF,KAAKL,MAAMC,QAE5C,6BACI,wBAAIM,UAAU,cAAcF,KAAKL,MAAML,MACvC,wBAAIY,UAAU,cAAd,MAA+BF,KAAKL,MAAMD,OAE9C,yBAAKQ,UAAU,uBACX,2BAAOC,KAAK,SAASD,UAAWF,KAAKL,MAAMR,WAAYiB,KAAK,SAASnB,MAAOe,KAAKL,MAAMV,MAAOoB,SAAUL,KAAKlB,eAC7G,4BAAQoB,UAAU,iCAAiCE,KAAK,SAASE,QAASN,KAAKD,aAAcQ,UAAWP,KAAKL,MAAMV,OAAnH,gB,GA7ECuB,IAAMC,WCehBC,MAff,WACE,OACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,wDACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,WCGQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a6c8d671.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nclass Calculator extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            one1 : Math.floor(Math.random() * (30 - 20)) + 20,\n            one2 : Math.floor(Math.random() * (20 - 10)) + 10,\n            score : parseInt(0),\n            value : '',\n            checkValid : classNames('text-right','form-control', {'is-invalid': false})\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        \n    }   \n\n    handleChange = (event) =>{\n        \n        this.setState({\n            value: event.target.value,\n            checkValid : classNames('text-right','form-control', { 'is-invalid': false})\n        });\n    }\n\n    randomise = () =>{\n        this.setState({\n            one1 : Math.floor(Math.random() * (30 - 10)) + 10,\n            one2 : Math.floor(Math.random() * (20 - 10)) + 10,\n            value: ''\n        })\n    }\n\n    handleSubmit(event) {\n        \n        if( parseInt(this.state.value) === parseInt(this.state.one1 + this.state.one2) ){\n            //Correct\n            this.setState({\n                score: this.state.score + 1,\n                checkValid : classNames('text-right','form-control', { 'is-invalid': false})\n            })\n            this.randomise();\n\n\n        }else{\n            //Wrong\n            this.setState({\n                checkValid : classNames('text-right','form-control', {'is-invalid': true})\n            });\n           \n            \n        }\n\n        event.preventDefault();\n    }\n\n\n    \n    render(){\n        if( this.state.score > 2 ){\n            return(\n                <h1 className=\"text-center\">Yay</h1>\n            )\n        }\n        else{\n            return(        \n                <div>\n                    <div className='alert alert-primary'>\n                        <p className=\"text-center\">Score</p>\n                        <h1 className=\"text-center\">{this.state.score}</h1>\n                    </div>\n                    <div>\n                        <h1 className=\"text-right\">{this.state.one1}</h1>\n                        <h1 className=\"text-right\"> + {this.state.one2}</h1>\n                    </div>\n                    <div className=\"form-row text-right\">\n                        <input name=\"result\" className={this.state.checkValid} type=\"number\" value={this.state.value} onChange={this.handleChange}/>\n                        <button className=\"btn btn-primary btn-block mt-2\" type=\"button\" onClick={this.handleSubmit} disabled={!this.state.value}>Submit</button>\n                        \n                    </div>\n                </div>\n            )\n        }\n    }\n\n}\n\nexport default Calculator;","import React from 'react';\nimport Calculator from './component/calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row vh-100 justify-content-center align-items-center\">\n          <div className=\"col col-md-2 col-6\">\n            <Calculator />\n          </div>\n          \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}