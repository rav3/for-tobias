{"version":3,"sources":["component/numberContainer.js","component/calculator.js","App.js","serviceWorker.js","index.js"],"names":["NumberContainer","props","className","num","Calculator","useState","Math","floor","random","one1","setOne","one2","setTwo","parseInt","score","setScore","value","setValue","classNames","checkValid","setCheckValid","handleSubmit","event","preventDefault","Fragment","action","autoComplete","onSubmit","name","type","onChange","target","handleChange","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAEeA,EADS,SAAAC,GAAK,OAAK,wBAAIC,UAAU,cAAcD,EAAME,MCuErDC,EAnEI,WAAO,IAAD,EACGC,mBAASC,KAAKC,MAAM,GAAAD,KAAKE,UAAwB,IADpD,mBACdC,EADc,KACPC,EADO,OAEGL,mBAASC,KAAKC,MAAM,GAAAD,KAAKE,UAAwB,IAFpD,mBAEdG,EAFc,KAEPC,EAFO,OAGKP,mBAASQ,SAAS,IAHvB,mBAGdC,EAHc,KAGPC,EAHO,OAIKV,mBAAS,IAJd,mBAIdW,EAJc,KAIPC,EAJO,OAKeZ,mBAASa,IAAW,aAAc,eAAgB,CAAE,kCAAkC,KALrG,mBAKdC,EALc,KAKFC,EALE,KAkBfC,EAAe,SAAAC,GACbT,SAASG,KAAWH,SAASJ,EAAOE,IAEpCI,EAASD,EAAQ,GACjBM,EAAcF,IAAW,aAAc,eAAgB,CAAE,kCAAkC,KAT/FR,EAAOJ,KAAKC,MAAM,GAAAD,KAAKE,UAAwB,IAC/CI,EAAON,KAAKC,MAAM,GAAAD,KAAKE,UAAwB,IAC/CS,EAAS,KAWLG,EAAcF,IAAW,aAAc,eAAgB,CAAE,kCAAkC,KAE/FI,EAAMC,kBASN,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKtB,UAAU,uBACX,uBAAGA,UAAU,eAAb,SACA,wBAAIA,UAAU,eAAeY,IAEjC,yBAAKZ,UAAU,qBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,8BACX,kCAEJ,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAiBC,IAAKM,IACtB,kBAAC,EAAD,CAAiBN,IAAKQ,QAKtC,yBAAKT,UAAU,uBACX,0BAAMuB,OAAO,GAAGC,aAAa,MAAMC,SAAU,SAAAL,GAAUD,EAAaC,KAChE,2BAAOM,KAAK,SAAS1B,UAAWiB,EAAYU,KAAK,SAASb,MAAOA,EAAOc,SAAU,SAAAR,IAnDjF,SAAAA,GACjBL,EAASK,EAAMS,OAAOf,OACtBI,EAAcF,IAAW,aAAc,eAAgB,CAAE,kCAAkC,KAiDiBc,CAAaV,IAASI,aAAa,QAC/H,4BAAQxB,UAAU,iCAAiC2B,KAAK,SAASI,QAAS,SAAAX,GAAUD,EAAaC,IAASY,UAAWlB,GAArH,cC/CTmB,MAdf,WACE,OACE,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,wDACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,WCGQkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f2a23c22.chunk.js","sourcesContent":["import React from 'react';\nconst NumberContainer = props =>  <h1 className=\"text-right\">{props.num}</h1>;\nexport default NumberContainer;\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport NumberContainer from './numberContainer';\n\n\nconst Calculator = () => {\n    const [one1 , setOne] = useState(Math.floor(Math.random() * (30 - 20)) + 20);\n    const [one2 , setTwo] = useState(Math.floor(Math.random() * (30 - 20)) + 20);\n    const [score, setScore] = useState(parseInt(0));\n    const [value, setValue] = useState('');\n    const [checkValid, setCheckValid] = useState(classNames('text-right', 'form-control', { 'is-invalid shake animated fast': false }));\n\n    const handleChange = event => {\n        setValue(event.target.value);\n        setCheckValid(classNames('text-right', 'form-control' ,{ 'is-invalid shake animated fast': false }));\n    }\n\n    const randomise = () => {\n        setOne(Math.floor(Math.random() * (30 - 10)) + 10);\n        setTwo(Math.floor(Math.random() * (20 - 10)) + 10);\n        setValue('');\n    }\n\n    const handleSubmit = event =>{\n        if (parseInt(value) === parseInt(one1 + one2)) {\n            //Correct\n            setScore(score + 1);\n            setCheckValid(classNames('text-right', 'form-control' ,{ 'is-invalid shake animated fast': false }));\n            randomise();\n        } else {\n            //Wrong\n            setCheckValid(classNames('text-right', 'form-control' ,{ 'is-invalid shake animated fast': true }));\n        }\n        event.preventDefault();\n    }\n\n    // if (score > 2) {\n    //     return (\n    //         <h1 className=\"text-center\">Yay</h1>\n    //     )\n    // }\n    // else {\n        return (\n            <React.Fragment>\n                <div className='alert alert-primary'>\n                    <p className=\"text-center\">Score</p>\n                    <h1 className=\"text-center\">{score}</h1>\n                </div>\n                <div className=\"questionContainer\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col d-flex align-items-end\">\n                                <h1>+</h1>\n                            </div>\n                            <div className=\"col\">\n                                <NumberContainer num={one1}/>\n                                <NumberContainer num={one2}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"form-row text-right\">\n                    <form action=\"\" autoComplete=\"off\" onSubmit={event => {handleSubmit(event)}}>\n                        <input name=\"result\" className={checkValid} type=\"number\" value={value} onChange={event => {handleChange(event)}} autoComplete=\"off\" />\n                        <button className=\"btn btn-primary btn-block mt-2\" type=\"button\" onClick={event => {handleSubmit(event)}} disabled={!value}>Submit</button>\n                    </form>\n                </div>\n            </React.Fragment>\n        )\n    // }\n}\n\nexport default Calculator;","import React from 'react';\nimport Calculator from './component/calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row vh-100 justify-content-center align-items-center\">\n          <div className=\"col col-md-3 col-6\">\n            <Calculator />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'animate.css/animate.min.css';\nimport './App.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}