{"version":3,"sources":["component/numberContainer.js","component/calculator.js","App.js","serviceWorker.js","index.js"],"names":["NumberContainer","props","className","num","Calculator","initialValue","randomNum1","Math","floor","random","randomNum2","score","parseInt","checkValid","questionNum","useState","num1","setNum1","num2","setNum2","setScore","value","setValue","setCheckValid","setQuestionNum","randomise","handleSubmit","e","target","key","preDefault","classNames","Fragment","action","autoComplete","onSubmit","name","type","onChange","handleChange","onKeyPress","maxLength","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAEeA,EADS,SAAAC,GAAK,OAAK,wBAAIC,UAAU,cAAcD,EAAME,MCsGrDC,EAnGI,WACf,IAAMC,EAAe,CACjBC,WAAaC,KAAKC,MAAM,GAAAD,KAAKE,UAAwB,GACrDC,WAAaH,KAAKC,MAAM,GAAAD,KAAKE,UAAuB,EACpDE,MAAQC,SAAS,GACjBC,WAAa,sBACbC,YAAc,GANG,EASIC,mBAASV,EAAaC,YAT1B,mBASdU,EATc,KASPC,EATO,OAUIF,mBAASV,EAAaK,YAV1B,mBAUdQ,EAVc,KAUPC,EAVO,OAWKJ,mBAASV,EAAaM,OAX3B,mBAWdA,EAXc,KAWPS,EAXO,OAYKL,mBAAS,IAZd,mBAYdM,EAZc,KAYPC,EAZO,OAaeP,mBAASV,EAAaQ,YAbrC,mBAadA,EAbc,KAaFU,EAbE,OAciBR,mBAASV,EAAaS,aAdvC,mBAcdA,EAdc,KAcDU,EAdC,KAsBfC,EAAY,WACdR,EAAQZ,EAAaC,YACrBa,EAAQd,EAAaK,YACrBY,EAAS,KAGPI,EAAe,SAAAC,GACI,UAAjBA,EAAEC,OAAOC,KACTF,EAAEG,aAEFlB,SAASS,KAAWT,SAASI,EAAOE,IAEpCE,EAAST,EAAQ,GACjBY,EAAclB,EAAaQ,YAC3BY,IACAF,EAAcQ,IAAW,CAAE,0CAA0C,KACrEP,EAAeV,EAAc,KAG7BQ,EAAS,IACTC,EAAcQ,IAAW,CAAE,0CAA0C,OAU7E,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAK9B,UAAWW,GACZ,uBAAGX,UAAU,eAAb,SACA,wBAAIA,UAAU,eAAeS,IAEjC,yBAAKT,UAAU,qBACX,yBAAKA,UAAU,aAMX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,8BACX,kCAEJ,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAiBC,IAAKa,IACtB,kBAAC,EAAD,CAAiBb,IAAKe,QAKtC,yBAAKhB,UAAU,uBACX,0BAAM+B,OAAO,GAAGC,aAAa,MAAMC,SAAU,SAAAR,GAAMD,EAAaC,KAChE,2BACIS,KAAK,SACLlC,UAAU,0BACVmC,KAAK,OACLhB,MAAOA,EACPiB,SAAU,SAAAX,IAnEL,SAAAA,GACjBL,EAASK,EAAEC,OAAOP,OAClBE,EAAclB,EAAaQ,YAC3BU,EAAcQ,IAAW,CAAE,uBAAuB,KAgEtBQ,CAAaZ,IAC7BO,aAAa,MACbM,WAAY,SAAAb,GACM,UAAVA,EAAEE,KAAiBF,EAAEG,cAE7BW,UAAU,MAEV,4BAAQvC,UAAU,iCAAiCmC,KAAK,SAASK,QAAS,SAAAf,GAAMD,EAAaC,IAAKgB,UAAWtB,GAA7G,WAEJ,4BAAQnB,UAAU,8BAA8BmC,KAAK,SAASK,QAAS,WA5C/EjB,IACAL,EAASf,EAAaM,SA2Cd,YC/EDiC,MAdf,WACE,OACE,yBAAK1C,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,wDACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,WCGQ2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.70f11847.chunk.js","sourcesContent":["import React from 'react';\nconst NumberContainer = props =>  <h1 className=\"text-right\">{props.num}</h1>;\nexport default NumberContainer;\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport NumberContainer from './numberContainer';\n\nconst Calculator = () => {\n    const initialValue = {\n        randomNum1 : Math.floor(Math.random() * (30 - 20)) + 20,\n        randomNum2 : Math.floor(Math.random() * (20 - 1)) + 1,\n        score : parseInt(0),\n        checkValid : 'alert alert-primary',\n        questionNum : 1,\n\n    }\n    const [num1 , setNum1] = useState(initialValue.randomNum1);\n    const [num2 , setNum2] = useState(initialValue.randomNum2);\n    const [score, setScore] = useState(initialValue.score);\n    const [value, setValue] = useState('');\n    const [checkValid, setCheckValid] = useState(initialValue.checkValid);\n    const [questionNum, setQuestionNum] = useState(initialValue.questionNum);\n\n    const handleChange = e => {\n        setValue(e.target.value);\n        setCheckValid(initialValue.checkValid);\n        setCheckValid(classNames({ 'alert alert-primary': true }));\n    }\n\n    const randomise = () => {\n        setNum1(initialValue.randomNum1);\n        setNum2(initialValue.randomNum2);\n        setValue('');\n    }\n\n    const handleSubmit = e =>{\n        if (e.target.key === 'Enter') {\n            e.preDefault();\n        }\n        if (parseInt(value) === parseInt(num1 + num2)) {\n            //Correct\n            setScore(score + 1);\n            setCheckValid(initialValue.checkValid);\n            randomise();\n            setCheckValid(classNames({ 'alert alert-success tada animated fast': true }));\n            setQuestionNum(questionNum + 1);\n        } else {\n            //Wrong\n            setValue('');\n            setCheckValid(classNames({ 'alert alert-danger shake animated fast': true }));\n        }\n        \n    }\n\n    const reset = () => {\n        randomise();\n        setScore(initialValue.score);\n    }\n\n    return (\n        <React.Fragment>\n            <div className={checkValid}>\n                <p className=\"text-center\">Score</p>\n                <h1 className=\"text-center\">{score}</h1>\n            </div>\n            <div className=\"questionContainer\">\n                <div className=\"container\">\n                    {/* <div className=\"row\">\n                        <div className=\"col\">\n                            Question : {questionNum}\n                        </div>\n                    </div> */}\n                    <div className=\"row\">\n                        <div className=\"col d-flex align-items-end\">\n                            <h1>+</h1>\n                        </div>\n                        <div className=\"col\">\n                            <NumberContainer num={num1}/>\n                            <NumberContainer num={num2}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"form-row text-right\">\n                <form action=\"\" autoComplete=\"off\" onSubmit={e => {handleSubmit(e)}}>\n                <input \n                    name=\"result\" \n                    className=\"text-right form-control\" \n                    type=\"text\" \n                    value={value} \n                    onChange={e => {handleChange(e)}} \n                    autoComplete=\"off\" \n                    onKeyPress={e => {\n                        if (e.key === 'Enter') e.preDefault();\n                    }}\n                    maxLength=\"3\"\n                />\n                    <button className=\"btn btn-primary btn-block mt-2\" type=\"button\" onClick={e => {handleSubmit(e)}} disabled={!value}>Submit</button>\n                </form>\n                <button className=\"btn btn-link btn-block mt-4\" type=\"button\" onClick={() => {reset()}}>Reset</button>\n            </div>\n        </React.Fragment>\n    )\n\n}\n\nexport default Calculator;","import React from 'react';\nimport Calculator from './component/calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row vh-100 justify-content-center align-items-center\">\n          <div className=\"col col-md-3 col-6\">\n            <Calculator />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'animate.css/animate.min.css';\nimport './App.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}